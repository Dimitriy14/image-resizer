// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dimitriy14/image-resizing/repository (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/Dimitriy14/image-resizing/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllImages mocks base method
func (m *MockRepository) GetAllImages(arg0 uuid.UUID) ([]models.Images, error) {
	ret := m.ctrl.Call(m, "GetAllImages", arg0)
	ret0, _ := ret[0].([]models.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages
func (mr *MockRepositoryMockRecorder) GetAllImages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockRepository)(nil).GetAllImages), arg0)
}

// GetImageByID mocks base method
func (m *MockRepository) GetImageByID(arg0, arg1 uuid.UUID) (models.Images, error) {
	ret := m.ctrl.Call(m, "GetImageByID", arg0, arg1)
	ret0, _ := ret[0].(models.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByID indicates an expected call of GetImageByID
func (mr *MockRepositoryMockRecorder) GetImageByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByID", reflect.TypeOf((*MockRepository)(nil).GetImageByID), arg0, arg1)
}

// SaveImage mocks base method
func (m *MockRepository) SaveImage(arg0 models.Images) (models.Images, error) {
	ret := m.ctrl.Call(m, "SaveImage", arg0)
	ret0, _ := ret[0].(models.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage
func (mr *MockRepositoryMockRecorder) SaveImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockRepository)(nil).SaveImage), arg0)
}

// UpdateImage mocks base method
func (m *MockRepository) UpdateImage(arg0 models.Images) (models.Images, error) {
	ret := m.ctrl.Call(m, "UpdateImage", arg0)
	ret0, _ := ret[0].(models.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImage indicates an expected call of UpdateImage
func (mr *MockRepositoryMockRecorder) UpdateImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockRepository)(nil).UpdateImage), arg0)
}
